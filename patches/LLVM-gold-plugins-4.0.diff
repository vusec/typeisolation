Index: include/llvm/Pass.h
===================================================================
--- include/llvm/Pass.h	(revision 305145)
+++ include/llvm/Pass.h	(working copy)
@@ -178,6 +178,11 @@
   // dumpPassStructure - Implement the -debug-passes=PassStructure option
   virtual void dumpPassStructure(unsigned Offset = 0);
 
+  // getOptimizationSchedule - returns -1 to run before optimizations,
+  // 1 to run after optimizations, or 0 to run in between of two rounds
+  // of optimization passes
+  virtual int getOptimizationSchedule() const;
+
   // lookupPassInfo - Return the pass info object for the specified pass class,
   // or null if it is not known.
   static const PassInfo *lookupPassInfo(const void *TI);
Index: lib/IR/Pass.cpp
===================================================================
--- lib/IR/Pass.cpp	(revision 305145)
+++ lib/IR/Pass.cpp	(working copy)
@@ -60,6 +60,10 @@
   dbgs().indent(Offset*2) << getPassName() << "\n";
 }
 
+int Pass::getOptimizationSchedule() const {
+  return 0;
+}
+
 /// getPassName - Return a nice clean name for a pass.  This usually
 /// implemented in terms of the name that is registered by one of the
 /// Registration templates, but can be overloaded directly.
Index: lib/LTO/LTOBackend.cpp
===================================================================
--- lib/LTO/LTOBackend.cpp	(revision 305145)
+++ lib/LTO/LTOBackend.cpp	(working copy)
@@ -21,7 +21,9 @@
 #include "llvm/Analysis/TargetTransformInfo.h"
 #include "llvm/Bitcode/BitcodeReader.h"
 #include "llvm/Bitcode/BitcodeWriter.h"
+#include "llvm/Bitcode/BitcodeWriterPass.h"
 #include "llvm/IR/LegacyPassManager.h"
+#include "llvm/IR/LegacyPassNameParser.h"
 #include "llvm/IR/PassManager.h"
 #include "llvm/IR/Verifier.h"
 #include "llvm/LTO/LTO.h"
@@ -30,8 +32,10 @@
 #include "llvm/Passes/PassBuilder.h"
 #include "llvm/Support/Error.h"
 #include "llvm/Support/FileSystem.h"
+#include "llvm/Support/PluginLoader.h"
 #include "llvm/Support/TargetRegistry.h"
 #include "llvm/Support/ThreadPool.h"
+#include "llvm/Support/ToolOutputFile.h"
 #include "llvm/Target/TargetMachine.h"
 #include "llvm/Transforms/IPO.h"
 #include "llvm/Transforms/IPO/PassManagerBuilder.h"
@@ -42,6 +46,24 @@
 using namespace llvm;
 using namespace lto;
 
+// The OptimizationList is automatically populated with registered Passes by the
+// PassNameParser.
+//
+static cl::list<const PassInfo*, bool, PassNameParser>
+PassList(cl::desc("Optimizations available:"));
+
+static cl::opt<bool>
+DisableOpt("disable-opt", cl::init(false),
+  cl::desc("Do not run any optimization passes"));
+
+static cl::opt<bool>
+DisableInlining("disable-inlining", cl::init(false),
+  cl::desc("Do not run any inlining passes"));
+
+static cl::opt<std::string>
+LLOutputFilename("llo", cl::init(""), cl::desc("Output IR filename"),
+               cl::value_desc("filename"));
+
 LLVM_ATTRIBUTE_NORETURN static void reportOpenError(StringRef Path, Twine Msg) {
   errs() << "failed to open " << Path << ": " << Msg << '\n';
   errs().flush();
@@ -167,6 +189,38 @@
   MPM.run(Mod, MAM);
 }
 
+static int addDynamicPasses(
+  legacy::PassManager &passes,
+  TargetMachine *TM,
+  int optimizationSchedule) {
+  int count = 0;
+
+  for (unsigned i = 0; i < PassList.size(); ++i) {
+    const PassInfo *PassInf = PassList[i];
+    Pass *P = nullptr;
+    if (PassInf->getTargetMachineCtor())
+      P = PassInf->getTargetMachineCtor()(TM);
+    else if (PassInf->getNormalCtor())
+      P = PassInf->getNormalCtor()();
+    else
+      errs() << "LLVMgold: cannot create pass: "
+             << PassInf->getPassName() << "\n";
+
+    if (P->getOptimizationSchedule() != optimizationSchedule) {
+       /* TODO ignoring memory leak for now, should free pass */
+       continue;
+    }
+
+    if (P) {
+      passes.add(P);
+      passes.add(createVerifierPass());
+      count++;
+    }
+  }
+
+  return count;
+}
+
 static void runOldPMPasses(Config &Conf, Module &Mod, TargetMachine *TM,
                            bool IsThinLTO) {
   legacy::PassManager passes;
@@ -174,7 +228,12 @@
 
   PassManagerBuilder PMB;
   PMB.LibraryInfo = new TargetLibraryInfoImpl(Triple(TM->getTargetTriple()));
-  PMB.Inliner = createFunctionInliningPass();
+  if (DisableInlining) {
+    PMB.Inliner = NULL;
+  }
+  else
+    PMB.Inliner = createFunctionInliningPass();
+
   // Unconditionally verify input since it is not verified before this
   // point and has unknown origin.
   PMB.VerifyInput = true;
@@ -182,12 +241,43 @@
   PMB.LoopVectorize = true;
   PMB.SLPVectorize = true;
   PMB.OptLevel = Conf.OptLevel;
+  if (DisableOpt)
+    PMB.OptLevel = 0;
+
+  addDynamicPasses(passes, TM, -1);
+
   PMB.PGOSampleUse = Conf.SampleProfile;
   if (IsThinLTO)
     PMB.populateThinLTOPassManager(passes);
   else
     PMB.populateLTOPassManager(passes);
+
+  if (addDynamicPasses(passes, TM, 0)) {
+    if (IsThinLTO)
+      PMB.populateThinLTOPassManager(passes);
+    else
+      PMB.populateLTOPassManager(passes);
+  }
+
+  addDynamicPasses(passes, TM, 1);
+
+  std::unique_ptr<tool_output_file> Out;
+  if (LLOutputFilename != "") {
+    std::error_code EC;
+    Out.reset(
+      new tool_output_file(LLOutputFilename, EC, sys::fs::F_None));
+    if (EC) {
+      errs() << EC.message() << '\n';
+      return;
+    }
+    passes.add(createBitcodeWriterPass(Out->os()));
+  }
+
   passes.run(Mod);
+
+  if (LLOutputFilename != "") {
+    Out->keep();
+  }
 }
 
 bool opt(Config &Conf, TargetMachine *TM, unsigned Task, Module &Mod,
Index: lib/LTO/LTOCodeGenerator.cpp
===================================================================
--- lib/LTO/LTOCodeGenerator.cpp	(revision 305145)
+++ lib/LTO/LTOCodeGenerator.cpp	(working copy)
@@ -537,6 +537,7 @@
 bool LTOCodeGenerator::optimize(bool DisableVerify, bool DisableInline,
                                 bool DisableGVNLoadPRE,
                                 bool DisableVectorization) {
+#include "llvm/Support/ToolOutputFile.h"
   if (!this->determineTarget())
     return false;
 
Index: tools/gold/CMakeLists.txt
===================================================================
--- tools/gold/CMakeLists.txt	(revision 305145)
+++ tools/gold/CMakeLists.txt	(working copy)
@@ -1,4 +1,4 @@
-set(LLVM_EXPORTED_SYMBOL_FILE ${CMAKE_CURRENT_SOURCE_DIR}/gold.exports)
+#set(LLVM_EXPORTED_SYMBOL_FILE ${CMAKE_CURRENT_SOURCE_DIR}/gold.exports)
 
 if( LLVM_ENABLE_PIC AND LLVM_BINUTILS_INCDIR )
   include_directories( ${LLVM_BINUTILS_INCDIR} )
